// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_book_progress.sql

package database

import (
	"context"
	"database/sql"
)

const getProgressUpdates = `-- name: GetProgressUpdates :many
SELECT id, user_book_id, progress, comment, created_at FROM user_book_progress 
WHERE user_book_id = (SELECT id FROM user_books WHERE user_id = $1 AND isbn = $2) 
ORDER BY created_at DESC
`

type GetProgressUpdatesParams struct {
	UserID string
	Isbn   string
}

func (q *Queries) GetProgressUpdates(ctx context.Context, arg GetProgressUpdatesParams) ([]UserBookProgress, error) {
	rows, err := q.db.QueryContext(ctx, getProgressUpdates, arg.UserID, arg.Isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserBookProgress
	for rows.Next() {
		var i UserBookProgress
		if err := rows.Scan(
			&i.ID,
			&i.UserBookID,
			&i.Progress,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadingStatus = `-- name: GetReadingStatus :one
SELECT status FROM user_books WHERE user_id = $1 AND isbn = $2
`

type GetReadingStatusParams struct {
	UserID string
	Isbn   string
}

func (q *Queries) GetReadingStatus(ctx context.Context, arg GetReadingStatusParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getReadingStatus, arg.UserID, arg.Isbn)
	var status string
	err := row.Scan(&status)
	return status, err
}

const updateProgressWithComment = `-- name: UpdateProgressWithComment :one
INSERT INTO user_book_progress (user_book_id, progress, comment)
VALUES (
    (SELECT id FROM user_books WHERE user_id = $1 AND isbn = $2),
    $3,
    $4
) RETURNING id, user_book_id, progress, comment, created_at
`

type UpdateProgressWithCommentParams struct {
	UserID   string
	Isbn     string
	Progress int32
	Comment  sql.NullString
}

func (q *Queries) UpdateProgressWithComment(ctx context.Context, arg UpdateProgressWithCommentParams) (UserBookProgress, error) {
	row := q.db.QueryRowContext(ctx, updateProgressWithComment,
		arg.UserID,
		arg.Isbn,
		arg.Progress,
		arg.Comment,
	)
	var i UserBookProgress
	err := row.Scan(
		&i.ID,
		&i.UserBookID,
		&i.Progress,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}
