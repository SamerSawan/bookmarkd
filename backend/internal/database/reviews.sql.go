// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews ( isbn, user_id, review, stars, recommended )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, isbn, user_id, review, stars, recommended, created_at
`

type CreateReviewParams struct {
	Isbn        string
	UserID      string
	Review      sql.NullString
	Stars       sql.NullFloat64
	Recommended sql.NullBool
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.Isbn,
		arg.UserID,
		arg.Review,
		arg.Stars,
		arg.Recommended,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.UserID,
		&i.Review,
		&i.Stars,
		&i.Recommended,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews WHERE isbn = $1 AND user_id = $2
`

type DeleteReviewParams struct {
	Isbn   string
	UserID string
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.Isbn, arg.UserID)
	return err
}

const getBookReviews = `-- name: GetBookReviews :many
SELECT 
    r.id,
    r.isbn,
    r.user_id,
    r.review,
    r.stars,
    r.recommended,
    r.created_at,
    u.username,
    b.title,
    b.cover_image_url
FROM reviews r
JOIN users u ON r.user_id = u.id
JOIN books b ON r.isbn = b.isbn
WHERE r.isbn = $1
`

type GetBookReviewsRow struct {
	ID            uuid.UUID
	Isbn          string
	UserID        string
	Review        sql.NullString
	Stars         sql.NullFloat64
	Recommended   sql.NullBool
	CreatedAt     sql.NullTime
	Username      string
	Title         string
	CoverImageUrl string
}

func (q *Queries) GetBookReviews(ctx context.Context, isbn string) ([]GetBookReviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookReviews, isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookReviewsRow
	for rows.Next() {
		var i GetBookReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.UserID,
			&i.Review,
			&i.Stars,
			&i.Recommended,
			&i.CreatedAt,
			&i.Username,
			&i.Title,
			&i.CoverImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentReviews = `-- name: GetRecentReviews :many
SELECT
    r.id,
    r.isbn,
    r.user_id,
    r.review,
    r.stars,
    r.recommended,
    r.created_at,
    u.username,
    b.title,
    b.cover_image_url
FROM reviews r
JOIN users u ON r.user_id = u.id
JOIN books b ON r.isbn = b.isbn
ORDER BY r.created_at DESC
LIMIT $1 OFFSET $2
`

type GetRecentReviewsParams struct {
	Limit  int32
	Offset int32
}

type GetRecentReviewsRow struct {
	ID            uuid.UUID
	Isbn          string
	UserID        string
	Review        sql.NullString
	Stars         sql.NullFloat64
	Recommended   sql.NullBool
	CreatedAt     sql.NullTime
	Username      string
	Title         string
	CoverImageUrl string
}

func (q *Queries) GetRecentReviews(ctx context.Context, arg GetRecentReviewsParams) ([]GetRecentReviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentReviewsRow
	for rows.Next() {
		var i GetRecentReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.UserID,
			&i.Review,
			&i.Stars,
			&i.Recommended,
			&i.CreatedAt,
			&i.Username,
			&i.Title,
			&i.CoverImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReview = `-- name: GetReview :one
SELECT id, isbn, user_id, review, stars, recommended, created_at FROM reviews WHERE isbn = $1 AND user_id = $2
`

type GetReviewParams struct {
	Isbn   string
	UserID string
}

func (q *Queries) GetReview(ctx context.Context, arg GetReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, arg.Isbn, arg.UserID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.UserID,
		&i.Review,
		&i.Stars,
		&i.Recommended,
		&i.CreatedAt,
	)
	return i, err
}

const getReviewsByUser = `-- name: GetReviewsByUser :many
SELECT
  r.id,
  r.isbn,
  b.title,
  r.stars,
  r.recommended,
  r.review,
  r.created_at,
  u.username,
  b.cover_image_url
FROM reviews r
JOIN books b ON r.isbn = b.isbn
JOIN users u ON r.user_id = u.id
WHERE r.user_id = $1
ORDER BY r.created_at DESC
`

type GetReviewsByUserRow struct {
	ID            uuid.UUID
	Isbn          string
	Title         string
	Stars         sql.NullFloat64
	Recommended   sql.NullBool
	Review        sql.NullString
	CreatedAt     sql.NullTime
	Username      string
	CoverImageUrl string
}

func (q *Queries) GetReviewsByUser(ctx context.Context, userID string) ([]GetReviewsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByUserRow
	for rows.Next() {
		var i GetReviewsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Stars,
			&i.Recommended,
			&i.Review,
			&i.CreatedAt,
			&i.Username,
			&i.CoverImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
