// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package database

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews ( isbn, user_id, review, stars )
VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, isbn, user_id, review, stars
`

type CreateReviewParams struct {
	Isbn   string
	UserID string
	Review string
	Stars  sql.NullString
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.Isbn,
		arg.UserID,
		arg.Review,
		arg.Stars,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.UserID,
		&i.Review,
		&i.Stars,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews WHERE isbn = $1 AND user_id = $2
`

type DeleteReviewParams struct {
	Isbn   string
	UserID string
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.Isbn, arg.UserID)
	return err
}

const getBookReviews = `-- name: GetBookReviews :many
SELECT id, isbn, user_id, review, stars FROM reviews WHERE isbn = $1
`

func (q *Queries) GetBookReviews(ctx context.Context, isbn string) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getBookReviews, isbn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.UserID,
			&i.Review,
			&i.Stars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReview = `-- name: GetReview :one
SELECT id, isbn, user_id, review, stars FROM reviews WHERE isbn = $1 AND user_id = $2
`

type GetReviewParams struct {
	Isbn   string
	UserID string
}

func (q *Queries) GetReview(ctx context.Context, arg GetReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, arg.Isbn, arg.UserID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.UserID,
		&i.Review,
		&i.Stars,
	)
	return i, err
}
