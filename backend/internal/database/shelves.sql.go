// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shelves.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addBookToShelf = `-- name: AddBookToShelf :one
INSERT INTO shelf_books (id, created_at, updated_at, shelf_id, book_isbn)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
) RETURNING id, created_at, updated_at, shelf_id, book_isbn
`

type AddBookToShelfParams struct {
	ShelfID  uuid.UUID
	BookIsbn string
}

func (q *Queries) AddBookToShelf(ctx context.Context, arg AddBookToShelfParams) (ShelfBook, error) {
	row := q.db.QueryRowContext(ctx, addBookToShelf, arg.ShelfID, arg.BookIsbn)
	var i ShelfBook
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShelfID,
		&i.BookIsbn,
	)
	return i, err
}

const createShelf = `-- name: CreateShelf :one
INSERT INTO shelves (id, created_at, updated_at, name) 
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1
) RETURNING id, created_at, updated_at, name
`

func (q *Queries) CreateShelf(ctx context.Context, name string) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, createShelf, name)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getShelf = `-- name: GetShelf :one
SELECT id, created_at, updated_at, name FROM shelves WHERE id = $1
`

func (q *Queries) GetShelf(ctx context.Context, id uuid.UUID) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getShelf, id)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getUsersShelves = `-- name: GetUsersShelves :many
SELECT id, created_at, updated_at, user_id, shelf_id FROM user_shelves WHERE user_id = $1
`

func (q *Queries) GetUsersShelves(ctx context.Context, userID string) ([]UserShelf, error) {
	rows, err := q.db.QueryContext(ctx, getUsersShelves, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserShelf
	for rows.Next() {
		var i UserShelf
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ShelfID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
