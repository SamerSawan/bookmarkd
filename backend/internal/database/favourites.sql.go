// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: favourites.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFavourite = `-- name: CreateFavourite :one
INSERT INTO favourites ( user_id, isbn )
VALUES (
    $1,
    $2
) RETURNING id, user_id, isbn, created_at
`

type CreateFavouriteParams struct {
	UserID string
	Isbn   string
}

func (q *Queries) CreateFavourite(ctx context.Context, arg CreateFavouriteParams) (Favourite, error) {
	row := q.db.QueryRowContext(ctx, createFavourite, arg.UserID, arg.Isbn)
	var i Favourite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Isbn,
		&i.CreatedAt,
	)
	return i, err
}

const getFavourites = `-- name: GetFavourites :many
SELECT id, user_id, isbn, created_at FROM favourites WHERE user_id = $1
`

func (q *Queries) GetFavourites(ctx context.Context, userID string) ([]Favourite, error) {
	rows, err := q.db.QueryContext(ctx, getFavourites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favourite
	for rows.Next() {
		var i Favourite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Isbn,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavouritesVerbose = `-- name: GetFavouritesVerbose :many
SELECT
  f.isbn,
  f.user_id,
  f.id,
  b.title,
  b.cover_image_url,
  b.publish_date,
  b.pages,
  b.description
FROM favourites f
JOIN users u ON u.id = f.user_id
JOIN books b ON b.isbn = f.isbn
WHERE f.user_id = $1
`

type GetFavouritesVerboseRow struct {
	Isbn          string
	UserID        string
	ID            uuid.UUID
	Title         string
	CoverImageUrl string
	PublishDate   sql.NullTime
	Pages         int32
	Description   string
}

func (q *Queries) GetFavouritesVerbose(ctx context.Context, userID string) ([]GetFavouritesVerboseRow, error) {
	rows, err := q.db.QueryContext(ctx, getFavouritesVerbose, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavouritesVerboseRow
	for rows.Next() {
		var i GetFavouritesVerboseRow
		if err := rows.Scan(
			&i.Isbn,
			&i.UserID,
			&i.ID,
			&i.Title,
			&i.CoverImageUrl,
			&i.PublishDate,
			&i.Pages,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavourite = `-- name: RemoveFavourite :exec
DELETE FROM favourites WHERE user_id = $1 AND isbn = $2
`

type RemoveFavouriteParams struct {
	UserID string
	Isbn   string
}

func (q *Queries) RemoveFavourite(ctx context.Context, arg RemoveFavouriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavourite, arg.UserID, arg.Isbn)
	return err
}
