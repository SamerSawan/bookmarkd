// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkBookExistsInShelf = `-- name: CheckBookExistsInShelf :one
SELECT id, created_at, updated_at, shelf_id, book_isbn FROM shelf_books WHERE book_isbn = $1 AND shelf_id = $2
`

type CheckBookExistsInShelfParams struct {
	BookIsbn string
	ShelfID  uuid.UUID
}

func (q *Queries) CheckBookExistsInShelf(ctx context.Context, arg CheckBookExistsInShelfParams) (ShelfBook, error) {
	row := q.db.QueryRowContext(ctx, checkBookExistsInShelf, arg.BookIsbn, arg.ShelfID)
	var i ShelfBook
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShelfID,
		&i.BookIsbn,
	)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books ( isbn, created_at, updated_at, title, author, cover_image_url, publish_date, pages, description)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
    ) RETURNING isbn, created_at, updated_at, title, author, cover_image_url, publish_date, pages, description
`

type CreateBookParams struct {
	Isbn          string
	Title         string
	Author        string
	CoverImageUrl string
	PublishDate   time.Time
	Pages         int32
	Description   string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.CoverImageUrl,
		arg.PublishDate,
		arg.Pages,
		arg.Description,
	)
	var i Book
	err := row.Scan(
		&i.Isbn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.CoverImageUrl,
		&i.PublishDate,
		&i.Pages,
		&i.Description,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT isbn, created_at, updated_at, title, author, cover_image_url, publish_date, pages, description FROM books WHERE isbn = $1
`

func (q *Queries) GetBook(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, isbn)
	var i Book
	err := row.Scan(
		&i.Isbn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.CoverImageUrl,
		&i.PublishDate,
		&i.Pages,
		&i.Description,
	)
	return i, err
}

const getBooksInShelf = `-- name: GetBooksInShelf :many
SELECT book_isbn FROM shelf_books WHERE shelf_id = $1
`

func (q *Queries) GetBooksInShelf(ctx context.Context, shelfID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getBooksInShelf, shelfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var book_isbn string
		if err := rows.Scan(&book_isbn); err != nil {
			return nil, err
		}
		items = append(items, book_isbn)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetBooks = `-- name: ResetBooks :exec
DELETE FROM books
`

func (q *Queries) ResetBooks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetBooks)
	return err
}
